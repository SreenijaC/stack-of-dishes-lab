/*
 * this source file was generated by the gradle 'init' task
 */
package org.example;

public class App {
    public static void main(String[] args) {
        // creating stack to hold dishes
        Stack<Dish> dishStack = new Stack<>();
        System.out.println("Testing normal pushes:-");

        // adding 4 dishes to stack
        dishStack.push(new Dish("A dish with one fish pattern on it"));
        dishStack.push(new Dish("A dish with two fish patterns on it"));
        dishStack.push(new Dish("A dish with a red fish pattern on it"));
        dishStack.push(new Dish("A dish with a blue fish pattern on it"));

        // checks how many dishes are in stack now
        System.out.println("Current size: " + dishStack.size() + "\n"); // should be 4

        System.out.println("Peeking top dish:");
        // check dish on top without removing it
        Dish topDish = dishStack.peek();
        if (topDish != null) {
            System.out.println("Peeked dish: " + topDish.getDescription());
        }
        System.out.println();

        System.out.println("Popping top dish:");
        // removing top dish
        Dish removed = dishStack.pop();
        if (removed != null) {
            System.out.println("Popped dish: " + removed.getDescription());
        }
        System.out.println();

        System.out.println("Size after one pop: " + dishStack.size() + "\n");

        System.out.println("Popping until empty:\n");

        // popping the remaining dishes
        dishStack.pop();
        dishStack.pop();
        dishStack.pop(); // now the stack is empty

        // stack empty now, size should be 0
        System.out.println("Stack size now: " + dishStack.size() + " (should be 0)\n");

        System.out.println("Trying to pop from empty stack:");
        // trying to pop when stack empty
        Dish badPop = dishStack.pop(); // prints error
        if (badPop == null) {
            System.out.println("Pop returned null on empty stack as expected");
        }
        System.out.println();

        System.out.println("Trying to peek on empty stack:");
        // peek when stack empty
        Dish badPeek = dishStack.peek(); // prints error
        if (badPeek == null) {
            System.out.println("Peek returned null on empty stack as expected");
        }
        System.out.println();

        System.out.println("Pushing up to max:\n");
        // pushing 10 dishes to fill max size of stack
        for (int i = 1; i <= 10; i++) {
            dishStack.push(new Dish("Dish number " + i));
        }
        System.out.println("Size after pushing 10 dishes: " + dishStack.size() + "\n");

        System.out.println("Trying to push when stack is full:\n");
        // stack is full so can't be added
        dishStack.push(new Dish("Extra dish")); // should not be added
        System.out.println();

        System.out.println("Using clear method:");
        // clearing whole stack
        dishStack.clear();
        System.out.println("Size after clear: " + dishStack.size() + " (should be 0)\n");

        System.out.println("Pushing after clear:\n");
        // testing to push again after clearing
        dishStack.push(new Dish("Fresh start dish"));
        System.out.println("New top after clear: " + dishStack.peek().getDescription() + "\n");

        System.out.println("Testing stack with Strings:\n");
        // trying stack with strings instead of dishes
        Stack<String> wordStack = new Stack<>();
        wordStack.push("hello");
        wordStack.push("world");
        System.out.println("String peek: " + wordStack.peek());
        wordStack.pop();
        System.out.println("String top after pop: " + wordStack.peek() + "\n");

        System.out.println("Testing stack with Integers:\n");
        // trying stack with no.s
        Stack<Integer> numStack = new Stack<>();
        for (int i = 0; i < 5; i++) {
            numStack.push(i * 10);
        }
        System.out.println("Number peek: " + numStack.peek());
        numStack.clear();
        System.out.println("Number stack size after clear: " + numStack.size() + "\n");
    }
}
